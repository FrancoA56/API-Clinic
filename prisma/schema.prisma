// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum InvoiceType {
  A
  B
  C
}

enum PracticeStatus {
  PENDING
  COMPLETED
  CANCELLED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  lastname    String
  email       String   @unique
  password    String
  cuilprefix  Int
  dni         Int      @unique
  cuilpostfix Int
  createdAt   DateTime @default(now())
  roles       Role[]   @relation("UserRoles")
  doctor      Doctor?  @relation("DoctorUser") // Solo especificamos el nombre de la relación aquí
}

model Doctor {
  id                  Int             @id @default(autoincrement())
  matriculaNacional   Int             @unique
  matriculaProvincial Int             @unique
  user                User            @relation("DoctorUser", fields: [userId], references: [id]) // Aquí especificamos campos y referencias
  userId              Int             @unique // Campo relacionado con el ID de usuario
  specialties         Specialty[]     @relation("DoctorSpecialty")
  medicalEvolution    MedicalRecord[]
  appointments        Appointment[]
  practices           Practice[]
}

model Specialty {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  doctors Doctor[] @relation("DoctorSpecialty") // Relación con los doctores
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[] @relation("RolePermissions")
  users       User[]       @relation("UserRoles")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
  roles Role[] @relation("RolePermissions")
}

model Pacient {
  id              Int             @id @default(autoincrement())
  name            String
  lastname        String
  dni             Int             @unique
  medicalHistorys MedicalRecord[]
  socialNumber    String
  socials         Social[]        @relation("SocialPacient")
  appointments    Appointment[]
  practices       Practice[]
  pacientSocial   PacientSocial[]
}

model PacientSocial {
  id           Int     @id @default(autoincrement())
  pacient      Pacient @relation(fields: [pacientId], references: [id])
  pacientId    Int
  social       Social  @relation(fields: [socialId], references: [id])
  socialId     Int
  socialNumber Int
}

model MedicalRecord {
  id        Int      @id @default(autoincrement())
  patient   Pacient  @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  date      DateTime @default(now())
  diagnosis String
  evolution String // Campo para almacenar texto extenso
}

model Appointment {
  id        Int        @id @default(autoincrement())
  patient   Pacient    @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor     @relation(fields: [doctorId], references: [id])
  doctorId  Int
  date      DateTime
  createdAt DateTime   @default(now())
  practices Practice[]
}

model Invoice {
  id      Int         @id @default(autoincrement())
  type    InvoiceType
  serie   Int
  number  Int
  total   Float
  pdfUrl  String?
  socials Social[]

  @@unique([type, serie, number])
}

model Code {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  honorario     Float // Valor base de honorario
  gastos        Float // Valor base de gastos
  multiplier    Float? // Multiplicador genérico (opcional)
  practiceCodes PracticeCode[]
}

model Social {
  id             Int             @id @default(autoincrement())
  name           String
  cuil           String          @unique
  pacients       Pacient[]       @relation("SocialPacient")
  practices      Practice[]
  practicesCodes PracticeCode[]
  invoices       Invoice[]
  pacientSocial  PacientSocial[]
}

model Practice {
  id            Int            @id @default(autoincrement())
  description   String?
  date          DateTime       @default(now())
  hour          Int // Hora de la práctica (0-23)
  minute        Int // Minuto de la práctica (0-59)
  patient       Pacient        @relation(fields: [patientId], references: [id])
  patientId     Int
  doctor        Doctor         @relation(fields: [doctorId], references: [id])
  doctorId      Int
  appointment   Appointment    @relation(fields: [appointmentId], references: [id])
  appointmentId Int
  social        Social         @relation(fields: [socialId], references: [id])
  socialId      Int
  status        PracticeStatus @default(PENDING)
  createdAt     DateTime       @default(now())
  practiceCodes PracticeCode[]
}

model PracticeCode {
  id          Int      @id @default(autoincrement())
  practice    Practice @relation(fields: [practiceId], references: [id])
  practiceId  Int
  code        Code     @relation(fields: [codeId], references: [id])
  codeId      Int
  social      Social   @relation(fields: [socialId], references: [id])
  socialId    Int
  multiplier  Float? // Multiplicador específico para esta combinación
  forcedValue Float? // Valor forzado para esta combinación, opcional
}
